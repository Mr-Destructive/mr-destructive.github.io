<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object-Oriented-Programming on Meet Rajesh Gor</title>
    <link>http://localhost:1313/tags/object-oriented-programming/</link>
    <description>Recent content in Object-Oriented-Programming on Meet Rajesh Gor</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Sep 2021 19:33:52 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/object-oriented-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Object-Oriented Programming in C&#43;&#43;: Constructors</title>
      <link>http://localhost:1313/oop-cpp-p3/</link>
      <pubDate>Thu, 23 Sep 2021 19:33:52 +0530</pubDate>
      <guid>http://localhost:1313/oop-cpp-p3/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;After learning a bit about classes, objects, and access modifiers, we can move on to another important concept of Constructors and Destructors. This part will cover Constructors. We&amp;rsquo;ll explore what are constructors, why we need them, types of constructors, and their semantics in C++ as usual.&lt;/p&gt;&#xA;&lt;p&gt;So without wasting any time, let&amp;rsquo;s get started.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-constructor&#34;&gt;What is a constructor&lt;/h2&gt;&#xA;&lt;p&gt;A constructor is a method just like another method in a class, but it has a special name for a reason. The name itself speaks, &lt;code&gt;Constructor&lt;/code&gt;, which will get called just after the object gets created.  A constructor is just a method but it should only have the name same as of the class, that&amp;rsquo;s the thing that distinguishes it from other methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object-Oriented Programming in C&#43;&#43;: Access Modifiers</title>
      <link>http://localhost:1313/oop-cpp-p2/</link>
      <pubDate>Sat, 18 Sep 2021 15:12:29 +0530</pubDate>
      <guid>http://localhost:1313/oop-cpp-p2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving on to Part 2 of Object-Oriented Programming in C++, we will look into the concept of access modifiers which we skipped in the first section. This won&amp;rsquo;t be a comprehensive guide on access modifiers as it requires some other concepts like &lt;code&gt;Inheritance&lt;/code&gt; which we will introduce in the next few sections. This series will be like connecting the pieces of OOP together and building a good foundation.&lt;/p&gt;&#xA;&lt;p&gt;In this part, we will discuss the access modifiers and their related concepts. The below is a gist of what will be covered in this part.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object-Oriented Programming in C&#43;&#43;: Classes and Objects</title>
      <link>http://localhost:1313/oop-cpp-p1/</link>
      <pubDate>Thu, 16 Sep 2021 19:45:40 +0530</pubDate>
      <guid>http://localhost:1313/oop-cpp-p1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;We all know that C++ is famously known for Object-Oriented Programming, but what is Object-Oriented Programming? Well, this is the article, where we will explore the basics of Object-Oriented Programming, its building blocks i.e Classes and Objects, and get familiar with its basic semantics in C++. Let&amp;rsquo;s get into it straight away!&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-object-oriented-programming&#34;&gt;What is Object-Oriented Programming?&lt;/h2&gt;&#xA;&lt;p&gt;Object-Oriented Programming(OOP) is a way to structure and design a program or an application. Object-Oriented Programming deals with creating classes and objects and it&amp;rsquo;s related terminologies. OOP helps in following the principles like DRY(Don&amp;rsquo;t Repeat Yourself) and KISS(Keep it Simple Stupid). Using OOP certain applications and problems can be solved in a simple and efficient way. It helps in better understanding and readability of the code.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
