<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advent-of-Code on Meet Rajesh Gor</title>
    <link>http://localhost:1313/tags/advent-of-code/</link>
    <description>Recent content in Advent-of-Code on Meet Rajesh Gor</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Dec 2024 23:45:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/advent-of-code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent of Code Day 5 in Golang: Ordering Pages</title>
      <link>http://localhost:1313/aoc-2024-day-5/</link>
      <pubDate>Wed, 11 Dec 2024 23:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-5/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;It is day 5 of the advent of code, and today we have an interesting problem of ordering pages. Let’s dive into the problem and how I approached it. It was a pretty simple problem if thought it peacefully, otherwise, it would get into a map, list, and indices mess.&lt;/p&gt;&#xA;&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;&#xA;&lt;p&gt;In the input for day 5, we have two sections, The first defines the rules for ordering the pages, specifically which page should come before which and the second contains the actual order of pages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code Day 4 in Golang: Finding XMAS and X-MAS</title>
      <link>http://localhost:1313/aoc-2024-day-4/</link>
      <pubDate>Mon, 09 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-4/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving on to day 4, we have a grid problem in front of us, we are given some numbers in the form of a grid, i.e. some rows and columns with some upper case letters. What we need to do is to find is the word &lt;code&gt;XMAS&lt;/code&gt; in any direction (up, left, down, right, diagonals), and in the second part we need to find the word &lt;code&gt;MAS&lt;/code&gt; forming an X.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code Day 3 in Golang: Do Or Don’t Regex</title>
      <link>http://localhost:1313/aoc-2024-day-3/</link>
      <pubDate>Sat, 07 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-3/</guid>
      <description>&lt;p&gt;Inspired by Shradha Agarwal’s post on Byte Size Go :&lt;a href=&#34;https://www.bytesizego.com/blog/aoc-day3-golang&#34;&gt;here&lt;/a&gt;: I decided to write about my approach to this, it’s different, and would like to share it. That post was well written and the solution was compact and simple, I recommend reading that first as well.&lt;/p&gt;&#xA;&lt;p&gt;That is a blogvent series, I would also love to take part in blogvent but can&amp;rsquo;t be sure I&amp;rsquo;ll be completing this.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Well, it is day 3 of the advent of code 2024, and I have been doing it on live streams. I am behind two days but working through them one by one. So far, I have learned a lot of things in Go. Let’s dive in for the day 3.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code Day 2 in Golang: Slicing and Dicing Reports</title>
      <link>http://localhost:1313/aoc-2024-day-2/</link>
      <pubDate>Mon, 02 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;So, this is day 2 of the Advent of Code 2024 in Golang, and we will be exploring my approach and solution for the same. The problem was not as easy but was pretty simple after implemented and found correct.&lt;/p&gt;&#xA;&lt;p&gt;You can check out my solutions &lt;a href=&#34;https://github.com/Mr-Destructive/advent_of_code/blob/main/2024/src/day02/main.go&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-1&#34;&gt;Part 1&lt;/h2&gt;&#xA;&lt;p&gt;We have been given some lines called reports, and each report has a bunch of levels. and the requirement of the report is that it needs to be either strictly increasing or decreasing by a factor of at least 1 or at most 3.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code, 2024, Day 1 in Golang: Historian Hysteria</title>
      <link>http://localhost:1313/aoc-2024-day-1/</link>
      <pubDate>Sun, 01 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Hello everyone, it’s that time of the year, Advent of Code, I will be solving this year as well with Golang. In previous years I have been doing Advent of Code but was not able to keep up with the pace and left it midway (not even halfway). This year however I am determined and want to solve all the problems as much as I can.&lt;/p&gt;&#xA;&lt;p&gt;Let’s dive into the first day which should be and is pretty simple and straightforward. A simple list and map creation and traversal and basic math operations.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
