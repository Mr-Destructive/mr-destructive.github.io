<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Meet Rajesh Gor</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in Go on Meet Rajesh Gor</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Dec 2024 23:45:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent of Code Day 5 in Golang: Ordering Pages</title>
      <link>http://localhost:1313/aoc-2024-day-5/</link>
      <pubDate>Wed, 11 Dec 2024 23:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-5/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;It is day 5 of the advent of code, and today we have an interesting problem of ordering pages. Let’s dive into the problem and how I approached it. It was a pretty simple problem if thought it peacefully, otherwise, it would get into a map, list, and indices mess.&lt;/p&gt;&#xA;&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;&#xA;&lt;p&gt;In the input for day 5, we have two sections, The first defines the rules for ordering the pages, specifically which page should come before which and the second contains the actual order of pages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code Day 4 in Golang: Finding XMAS and X-MAS</title>
      <link>http://localhost:1313/aoc-2024-day-4/</link>
      <pubDate>Mon, 09 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-4/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving on to day 4, we have a grid problem in front of us, we are given some numbers in the form of a grid, i.e. some rows and columns with some upper case letters. What we need to do is to find is the word &lt;code&gt;XMAS&lt;/code&gt; in any direction (up, left, down, right, diagonals), and in the second part we need to find the word &lt;code&gt;MAS&lt;/code&gt; forming an X.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code Day 3 in Golang: Do Or Don’t Regex</title>
      <link>http://localhost:1313/aoc-2024-day-3/</link>
      <pubDate>Sat, 07 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-3/</guid>
      <description>&lt;p&gt;Inspired by Shradha Agarwal’s post on Byte Size Go :&lt;a href=&#34;https://www.bytesizego.com/blog/aoc-day3-golang&#34;&gt;here&lt;/a&gt;: I decided to write about my approach to this, it’s different, and would like to share it. That post was well written and the solution was compact and simple, I recommend reading that first as well.&lt;/p&gt;&#xA;&lt;p&gt;That is a blogvent series, I would also love to take part in blogvent but can&amp;rsquo;t be sure I&amp;rsquo;ll be completing this.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Well, it is day 3 of the advent of code 2024, and I have been doing it on live streams. I am behind two days but working through them one by one. So far, I have learned a lot of things in Go. Let’s dive in for the day 3.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code Day 2 in Golang: Slicing and Dicing Reports</title>
      <link>http://localhost:1313/aoc-2024-day-2/</link>
      <pubDate>Mon, 02 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-2/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;So, this is day 2 of the Advent of Code 2024 in Golang, and we will be exploring my approach and solution for the same. The problem was not as easy but was pretty simple after implemented and found correct.&lt;/p&gt;&#xA;&lt;p&gt;You can check out my solutions &lt;a href=&#34;https://github.com/Mr-Destructive/advent_of_code/blob/main/2024/src/day02/main.go&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;part-1&#34;&gt;Part 1&lt;/h2&gt;&#xA;&lt;p&gt;We have been given some lines called reports, and each report has a bunch of levels. and the requirement of the report is that it needs to be either strictly increasing or decreasing by a factor of at least 1 or at most 3.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code, 2024, Day 1 in Golang: Historian Hysteria</title>
      <link>http://localhost:1313/aoc-2024-day-1/</link>
      <pubDate>Sun, 01 Dec 2024 20:45:00 +0000</pubDate>
      <guid>http://localhost:1313/aoc-2024-day-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Hello everyone, it’s that time of the year, Advent of Code, I will be solving this year as well with Golang. In previous years I have been doing Advent of Code but was not able to keep up with the pace and left it midway (not even halfway). This year however I am determined and want to solve all the problems as much as I can.&lt;/p&gt;&#xA;&lt;p&gt;Let’s dive into the first day which should be and is pretty simple and straightforward. A simple list and map creation and traversal and basic math operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use Embedded Replicas of LibSQL Database hosted on Turso with a Golang Application</title>
      <link>http://localhost:1313/turso-libsql-embedded-replicas-golang/</link>
      <pubDate>Thu, 31 Oct 2024 21:45:00 +0000</pubDate>
      <guid>http://localhost:1313/turso-libsql-embedded-replicas-golang/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Welcome to the Let&amp;rsquo;s Go with Turso series. In this series, we will learn how to interact with LibSQL databases with Golang. In the past article of the series, we explored how to connect remote/local LibSQL database in golang.&lt;/p&gt;&#xA;&lt;p&gt;With this section, we will specifally dive into understanding how to create, connect, and query local embedded replicas of LibSQL database hosted on Turso with a Golang application.&lt;/p&gt;&#xA;&lt;p&gt;If you want to check out the YouTube video, check this out:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Connect LibSQL Database hosted on Turso in a Golang Application</title>
      <link>http://localhost:1313/turso-libsql-db-golang/</link>
      <pubDate>Mon, 30 Sep 2024 23:45:00 +0000</pubDate>
      <guid>http://localhost:1313/turso-libsql-db-golang/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Welcome to the new series in Golang, Let&amp;rsquo;s Go with Turso. In this series, we will learn how to interact with LibSQL databases with Golang. We will connect with a remote/local LibSQL database, create Embedded replicas, set up a local LibSQL database, and so much more as we explore and find out more features of LibSQL.&lt;/p&gt;&#xA;&lt;h2 id=&#34;connect-a-libsql-database-in-a-golang-application&#34;&gt;Connect a LibSQL database in a Golang application&lt;/h2&gt;&#xA;&lt;p&gt;In this post, we will learn how to connect and query a LibSQL database hosted on Turso/Cloud in a Golang Application using libsql-client package. We will go from setting up golang project, installing turso-cli, creating a database on turso with the cli, connecting to the database with shell, and golang and finally, we can query the database using Golang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Safely using Maps in Golang: Differences in declaration and initialization</title>
      <link>http://localhost:1313/golang-safely-using-maps/</link>
      <pubDate>Sat, 31 Aug 2024 18:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-safely-using-maps/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This week, I was working on one of the API wrapper packages for golang, and that dealt with sending post requests with URL encoded values, setting cookies, and all the fun stuff. However, while I was constructing the body, I was using &lt;a href=&#34;https://pkg.go.dev/net/url#Values&#34;&gt;url.Value&lt;/a&gt; type to construct the body, and use that to add and set key-value pairs. However, I was getting a wired &lt;code&gt;nil&lt;/code&gt; pointer reference error in some of the parts, I thought it was because of some of the variables I set manually. However, by debugging closer, I found out a common pitfall or bad practice of just declaring a type but initializing it and that causing &lt;code&gt;nil&lt;/code&gt; reference errors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Web: PUT Method</title>
      <link>http://localhost:1313/golang-web-put-method/</link>
      <pubDate>Sat, 15 Jun 2024 18:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-web-put-method/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this section of the series, we will be exploring how to send a &lt;code&gt;PUT&lt;/code&gt; HTTP request in golang. We will understand how to send a basic PUT request, create an HTTP request, update a resource on a server, parsing the content from struct to json, headers, etc in the following section of this post.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-put-method&#34;&gt;What is a PUT Method&lt;/h2&gt;&#xA;&lt;p&gt;A PUT method is a type of request that is used to update or modify an entire resource on a server/database.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Web: POST Method</title>
      <link>http://localhost:1313/golang-web-post-method/</link>
      <pubDate>Sun, 10 Mar 2024 20:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-web-post-method/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this section of the series, we will be exploring how to send a &lt;code&gt;POST&lt;/code&gt; HTTP request in golang. We will understand how to send a basic POST request, create an HTTP request, and parse json, structs into the request body, add headers, etc in the following sections of this post. We will understand how to marshal the golang struct/types into JSON format, send files in the request, and handle form data with examples of each in this article. Let&amp;rsquo;s answer a few questions first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Web: GET Method</title>
      <link>http://localhost:1313/golang-web-get-method/</link>
      <pubDate>Sat, 28 Oct 2023 20:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-web-get-method/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this section of the series, we will be exploring how to send a &lt;code&gt;GET&lt;/code&gt; HTTP request in golang. We will be understanding how to send a basic GET request, create an HTTP request and customize the client, add headers, read the response body, etc in the following sections of this post.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-get-method&#34;&gt;What is a GET method?&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP#Request_methods&#34;&gt;GET&lt;/a&gt; method in the context of an HTTP request is an action that is used to obtain data/resources. The &lt;code&gt;GET&lt;/code&gt; method is used in a web application to get a resource like an HTML page, image, video, media, etc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Web: URL Parsing</title>
      <link>http://localhost:1313/golang-web-url-parsing/</link>
      <pubDate>Tue, 05 Sep 2023 21:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-web-url-parsing/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;We have done around 32 posts on the fundamental concepts in golang, With that basic foundation, I&amp;rsquo;d like to start with the new section of this series which will be a major one as &lt;code&gt;web-development&lt;/code&gt;. This section will have nearly 40-50 posts, this will cover the fundamental concepts for web development like APIs, Database integrations, Authentication and Authorizations, Web applications, static sites, etc.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-url&#34;&gt;What is a URL?&lt;/h2&gt;&#xA;&lt;p&gt;A URL is a Uniform Resource Locator. It is a string of characters that identifies a resource on the Internet. URLs are the building blocks of the web, allowing us to access websites, documents, and data with just a click. URLs are all over the place, if we want to build a strong foundation in web development, it&amp;rsquo;s quite important to understand what URLs actually mean and what can they store.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Channels</title>
      <link>http://localhost:1313/golang-channels/</link>
      <pubDate>Mon, 28 Aug 2023 21:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-channels/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this part of the series, we will be continuing with the concurrency features of golang with channels. In the last post, we covered the fundamentals of go routines and wait groups. By leveraging those understood concepts, we will explore channels to communicate the data between various go routines.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-channels&#34;&gt;What are Channels&lt;/h2&gt;&#xA;&lt;p&gt;A golang Channel is like a pipe that lets goroutines communicate. It lets you pass values from one goroutine to another. Channels are typed i.e. you declare them with &lt;code&gt;chan&lt;/code&gt; keyword followed by the type to be sent and received (e.g. &lt;code&gt;chan int&lt;/code&gt;). The &lt;code&gt;chan&lt;/code&gt; type specifies the type of values that will be passed through the channel. We will explore the detailed technicalities soon. Right now, we need to just focus on what problem is channels solving.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Go Routines and WaitGroups</title>
      <link>http://localhost:1313/golang-go-routines/</link>
      <pubDate>Sat, 29 Jul 2023 15:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-go-routines/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;One of the key features that set Go apart from many other languages is its native support for Goroutines - lightweight concurrent functions that can run concurrently and efficiently manage concurrency tasks. Goroutines are an essential aspect of Go&amp;rsquo;s concurrency model, enabling developers to build highly concurrent and performant applications effortlessly.&lt;/p&gt;&#xA;&lt;p&gt;In this blog post, we will dive into the world of Goroutines and explore how they work, why they are essential for concurrent programming in Go, and how they can greatly improve the responsiveness and efficiency of your applications. This post will cover go routines and a primer on wait groups, in the next article we will be looking deeply into channels where all these three things can be demonstrated and understood in a better and more useful way.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Generics</title>
      <link>http://localhost:1313/golang-generics/</link>
      <pubDate>Sun, 23 Jul 2023 13:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-generics/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 29th post of the series, we will be looking into generics in Golang. Generics were added in Golang version 1.18, so they are quite new in the world of Golang but the concept is quite old in other programming languages.&lt;/p&gt;&#xA;&lt;p&gt;Generics provide a powerful toolset for writing more expressive and concise code that can handle a wide range of data types. With generics, we can write reusable algorithms, data structures, and functions that work seamlessly with various types, without sacrificing type safety.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Date and Time</title>
      <link>http://localhost:1313/golang-date-time/</link>
      <pubDate>Mon, 19 Jun 2023 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-date-time/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 28th post of the series, I will be exploring date and time handling in Golang. We will be covering the following topics:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Date and Time parsing&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Time Duration&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Time and Date Arithmetic&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Timezones&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Sleep and Tickers&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This will cover most of the methods and properties used extensively in general use cases related to time and date operations.&lt;/p&gt;&#xA;&lt;h2 id=&#34;time-package&#34;&gt;Time package&lt;/h2&gt;&#xA;&lt;p&gt;The Golang standard library provides the time package to handle date and time-related operations. It has a lot of methods and constants to work and handle data related to time and dates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Random Numbers</title>
      <link>http://localhost:1313/golang-random-numbers/</link>
      <pubDate>Sun, 14 May 2023 14:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-random-numbers/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 27th post of the series, we will be looking into random number generation in golang. We will be exploring how to create a random number, generate random numbers within a range, shuffle slices/arrays, and generate random strings, float, and bytes.&lt;/p&gt;&#xA;&lt;p&gt;There are two types of random number generation processes in software pseudo-random numbers and cryptographically secure pseudo-random number generation.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/math/rand&#34;&gt;math/rand&lt;/a&gt; package in Golang provides a number of functions for generating pseudorandom numbers. These functions are suitable for a variety of applications, such as games, simulations, and to some extent in cryptography.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Regex</title>
      <link>http://localhost:1313/golang-regex/</link>
      <pubDate>Wed, 22 Mar 2023 12:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-regex/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this 26th part of the series, we will be covering the basics of using regular expressions in golang. This article will cover the basic operations like matching, finding, replacing, and sub-matches in a regular expression pattern from string source or file content. This will have examples for each of the concepts and similar variants will follow the same ideology in self-exploring the syntax.&lt;/p&gt;&#xA;&lt;h2 id=&#34;regex-in-golang&#34;&gt;Regex in golang&lt;/h2&gt;&#xA;&lt;p&gt;So, let&amp;rsquo;s start with what are regular expressions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Command Line Arguments</title>
      <link>http://localhost:1313/golang-command-line-args/</link>
      <pubDate>Sat, 07 Jan 2023 21:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-command-line-args/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 25th post of the series, we will be taking a look into parsing of command line arguments in golang. We will be exploring how to do the basics of parsing and using the positional parameters or arguments from the command line in the program. By using standard library packages like &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt;, we can make powerful yet easy-to-build CLI apps and programs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;parsing-arguments-from-the-command-line-os-package&#34;&gt;Parsing Arguments from the command line (os package)&lt;/h2&gt;&#xA;&lt;p&gt;We can use the os package to get the arguments from the command line in a go script. We have to use the Args variable in the os package. The &lt;code&gt;Args&lt;/code&gt; variable is a slice of strings which thereby is the parsed arguments from the command line.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: File Write</title>
      <link>http://localhost:1313/golang-file-write/</link>
      <pubDate>Sun, 18 Dec 2022 15:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-file-write/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 24th post of the series, we will be taking a look at how we can perform write operations to a file using golang. We will be using the &lt;code&gt;os&lt;/code&gt; package in most operations along with &lt;code&gt;bufio&lt;/code&gt; text manipulations. We will be performing write operations like appending, deleting, and replacing a file using golang. We will be heavily leveraging standard library packages like &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;bufio&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt; and &lt;code&gt;fmt&lt;/code&gt;. We will also be looking into overwriting and string formatting to a file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: JSON YAML TOML (config) File Reading.</title>
      <link>http://localhost:1313/golang-config-file-read/</link>
      <pubDate>Tue, 01 Nov 2022 23:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-config-file-read/</guid>
      <description>&lt;h2 id=&#34;reading-specific-file-types-json-yaml-toml&#34;&gt;Reading specific file types (JSON, YAML, TOML)&lt;/h2&gt;&#xA;&lt;p&gt;In the previous post, we have seen how to read files in golang, in this extended post of that part, we will look into reading some specific files used for configuration and storing data like JSON, YAML, TOML, CSV, etc.&lt;/p&gt;&#xA;&lt;p&gt;We will see how to read files and get individual pieces in the files. We&amp;rsquo;ll use packages like &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;ioutil&lt;/code&gt; and &lt;code&gt;encoding&lt;/code&gt; to perform reading operations on file and file objects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: File Reading</title>
      <link>http://localhost:1313/golang-file-read/</link>
      <pubDate>Sun, 23 Oct 2022 23:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-file-read/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 22nd post of the series, we will be looking into the file-handling process in golang, in the next few posts, we will cover the operations on file using golang. In this first entry of the file handling sub-series, we will understand the &lt;code&gt;READ&lt;/code&gt; operation with files. We will see different ways to read a file, it can be word by word, line by line, or even custom chink by chunk.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Paths</title>
      <link>http://localhost:1313/golang-paths/</link>
      <pubDate>Sun, 02 Oct 2022 12:45:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-paths/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 21st post of the series, we will be exploring the file paths in golang, we will be exploring how we can deal with paths. By using packages like &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;io&lt;/code&gt;, we can work with file systems and operating system-specific details. In this section, we will see how to resolve paths, details from paths, extract relative or absolute paths, iterate over file systems, etc.&lt;/p&gt;&#xA;&lt;p&gt;Starting from this post, it will follow a specific topic in the upcoming few posts which will be covering files and paths. We will be talking about dealing with paths and files in golang. This post is just about working with paths.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Error Handling</title>
      <link>http://localhost:1313/golang-error-handling/</link>
      <pubDate>Sat, 17 Sep 2022 20:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-error-handling/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Error handling is quite an important feature of any programming language to improve the quality and transparency between the user and the application. By raising appropriate error messages, the user can get a clear idea about the things happening in the interface as well as the application can handle the errors with appropriate actions.&lt;/p&gt;&#xA;&lt;p&gt;In the 20th post of the series, we will be exploring the concept of error handling in golang. From this article, we will be able to learn the fundamentals of error or exception handling in golang, create custom error classes, raise and ignore error messages, and exit or redirect the flow of state of the application when an error is raised.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Interfaces</title>
      <link>http://localhost:1313/golang-interfaces/</link>
      <pubDate>Sat, 10 Sep 2022 17:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-interfaces/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 19th post of the series, we will be taking a look into interfaces in golang. Interfaces allow us to create function signatures common to different structs or types. So, we can allow multiple structs to have a common interface(method) that can have different implementations.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-interfaces&#34;&gt;What are Interfaces&lt;/h2&gt;&#xA;&lt;p&gt;Interface as the name suggests is a way to create methods that are common to different structures or types but can have different implementations. It&amp;rsquo;s an interface to define the method or function signatures but not the implementation. Let&amp;rsquo;s take an example of &lt;code&gt;Laptop&lt;/code&gt; and &lt;code&gt;Phone&lt;/code&gt; having the functionality of wifi. We can connect to wifi more or the less in a similar way on both devices. The implementation behind the functionality might be different but they share the same operation. The WiFi can act as an interface for both devices to connect to the internet.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Closures</title>
      <link>http://localhost:1313/golang-closures/</link>
      <pubDate>Thu, 11 Aug 2022 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-closures/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the previous part of the series, we covered &lt;a href=&#34;https://meetgor.com/golang-anonymous-functions/&#34;&gt;anonymous functions&lt;/a&gt; and in this section, we will look into &lt;code&gt;closures&lt;/code&gt; which are quite a cool concept for various things. Closures are basically a function that returns a function instead of a value, so basically we will leverage anonymous functions for creating closures.&lt;/p&gt;&#xA;&lt;h2 id=&#34;simple-closures&#34;&gt;Simple Closures&lt;/h2&gt;&#xA;&lt;p&gt;A simple closure can be constructed for understanding how we can use closures in golang. We will return a function from a function, that is a simple closure. So, in the below code example, we have created a function &lt;code&gt;gophy()&lt;/code&gt; which takes no parameters but returns a function that returns a &lt;code&gt;string&lt;/code&gt;.  The function simply returns an anonymous function that returns a string.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Anonymous Functions</title>
      <link>http://localhost:1313/golang-anonymous-functions/</link>
      <pubDate>Sun, 24 Jul 2022 18:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-anonymous-functions/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;We have looked at the defer keyword in golang in the &lt;a href=&#34;https://www.meetgor.com/golang-defer/&#34;&gt;previous&lt;/a&gt; part of the series, in this section, we will understand how we can use anonymous functions in golang. We will explore how to declare and use anonymous functions with a few examples.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-are-anonymous-functions&#34;&gt;What are Anonymous Functions&lt;/h2&gt;&#xA;&lt;p&gt;Anonymous functions are quite simple to understand, we don&amp;rsquo;t define a function, we declare it and call it instantly. An anonymous function doesn&amp;rsquo;t have a name so hence it is called an anonymous function. As a normal function it can take in parameters and return values. With anonymous functions, we can bind the operations to a variable or a constant as a literal(value). If an anonymous function takes in a parameter, it needs to be parsed immediately after the end of the function body. We will see how we define the syntax and specifications of the anonymous functions in golang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Defer</title>
      <link>http://localhost:1313/golang-defer/</link>
      <pubDate>Wed, 29 Jun 2022 22:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-defer/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this part of the series, we will be taking a look at the &lt;code&gt;defer&lt;/code&gt; keyword in golang. The defer keyword is used for delaying the function call in a particular block of program(function or a loop).&lt;/p&gt;&#xA;&lt;h2 id=&#34;defer-keyword&#34;&gt;Defer Keyword&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; keyword is an interesting keyword in golang, it basically holds up the execution of the statement until all the statements around the local scope has been executed. It is basically like a stack holding the execution of statements. You can have multiple defer keywords in the single code block(function or a loop), those will be called by the principle of &lt;strong&gt;first in last out&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: String Manipulation</title>
      <link>http://localhost:1313/golang-strings/</link>
      <pubDate>Tue, 28 Jun 2022 22:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-strings/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the 15th post of the Series, we will be looking into the details of the String manipulation and performing types of operations in Golang. We will explore string manipulation, concatenation, helper functions, etc. which will help in working with strings in Golang.&lt;/p&gt;&#xA;&lt;h2 id=&#34;string-concatenation&#34;&gt;String Concatenation&lt;/h2&gt;&#xA;&lt;p&gt;String Concatenation refers to the combining and formatting of strings in Golang. We can combine multiple strings and formating the way we display the strings in Golang. We have a few ways and functions to concatenate strings in Golang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Mutable and Immutable Data Types</title>
      <link>http://localhost:1313/golang-mutable-immutable/</link>
      <pubDate>Tue, 21 Jun 2022 21:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-mutable-immutable/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this 14th Post of the 100 days of GOlang, we will be understanding about the mutable and immutable data types in Golang. Firstly, we will understand the concept of mutability and understand the differences in mutable and immutable data types, further we will explore which data types in Golang are Mutable and Immutable.&lt;/p&gt;&#xA;&lt;h2 id=&#34;mutable-data-type&#34;&gt;Mutable Data Type&lt;/h2&gt;&#xA;&lt;p&gt;Mutable data type is a data type which can be modified without reallocating any chunk of the memory assigned at the time of initialization. In simple words, a variable is mutable if its value can be altered without reallocating itself to a new memory space.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Operators</title>
      <link>http://localhost:1313/golang-operators/</link>
      <pubDate>Sat, 07 May 2022 20:33:38 +0000</pubDate>
      <guid>http://localhost:1313/golang-operators/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this 13th part of the series, we will be exploring the fundamentals of operators in Golang. We will be exploring the basics of operators and the various types like Arithmetic, Bitwise, Comparison, Assignment operators in Golang.&lt;/p&gt;&#xA;&lt;p&gt;Operators are quite fundamentals in any programming language. Operators are basically expressions or a set of character(s) to perform certain fundamental tasks. They allow us to perform certain trivial operations with a simple expression or character. There are quite a few operators in Golang to perform various operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Math Package</title>
      <link>http://localhost:1313/golang-math/</link>
      <pubDate>Mon, 25 Apr 2022 20:30:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-math/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving on in the 100 days of golang series, we can take a look into the math package in golang&amp;rsquo;s standard library. In programming, math is quite critical aspect, we need to perform certain mathematical operations quite regularly so golang&amp;rsquo;s standard library has a package for serving some quite commonly used math functions and procedures. We&amp;rsquo;ll take a look at some of the basic and common functions which are available in the math package.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Packages</title>
      <link>http://localhost:1313/golang-packages/</link>
      <pubDate>Fri, 22 Apr 2022 22:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-packages/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this 11th part of the series, we will be covering packages in golang. Package is a cool way to organize code in large projects. We can create a separate file which can include certain helper functions or variables from other files or scripts. There are couple of types of packages like packages from the standard library, open sourced community packages and custom packages that you can build of your own. In this particular section, we will be covering the fundamentals of packages and exploring the standard library in golang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Pointers</title>
      <link>http://localhost:1313/golang-pointers/</link>
      <pubDate>Tue, 19 Apr 2022 23:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-pointers/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the tenth part of the series, we will be looking into an interesting concept in programming i.e. Pointer. It&amp;rsquo;s a simple thing but a really powerful concept. Using pointers we can do several things very easily rather than writing a lot of code for a simple thing. We will be looking into basic concepts like declaration, referencing, de-referencing, and some examples on passing by reference, along with a pointer to struct instances.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Structs</title>
      <link>http://localhost:1313/golang-structs/</link>
      <pubDate>Thu, 14 Apr 2022 22:15:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-structs/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving on to the 9th part of the series, we will be understanding structs in golang. Structs are an important aspect of programming in Golang, they provide a way to define custom types and add functionality to them. We will be understanding the basics of operating on structs like declaration, initialization and adding functional logic into those structs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;structs-in-golang&#34;&gt;Structs in Golang&lt;/h2&gt;&#xA;&lt;p&gt;Structs or Structures in Golang are the sequences or collections of built-in data types as a single type interface. Just like we have int, string, float, and complex, we can define our own data types in golang. They can consist of built-in data types as mentioned and also certain functions or methods which can be used to operate on them. Using structs we can create custom data types that can meet the specific requirements of our problem. We can define structs and later inside functions we can create instances of those structures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Functions</title>
      <link>http://localhost:1313/golang-functions/</link>
      <pubDate>Wed, 13 Apr 2022 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-functions/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the eighth part of the series, we will be exploring functions in golang. We will be diving into some basics of functions in golang like declaration, definition and calling. We won&amp;rsquo;t be exploring all the topics of functions as it is quite a large topic to cover in one shot. So, building from the base, we will be starting from the basic declaration to simple return statements.&lt;/p&gt;&#xA;&lt;h2 id=&#34;functions-in-golang&#34;&gt;Functions in Golang&lt;/h2&gt;&#xA;&lt;p&gt;Functions in golang are a simple way to structure a block of code that can be re-usable. Functions also allow us to process a piece of logic and return the output. Functions allow us to write readable and scalable code as we have to write the code once and we can re-use the functionality of it by calling it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Maps</title>
      <link>http://localhost:1313/golang-maps/</link>
      <pubDate>Tue, 12 Apr 2022 20:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-maps/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the seventh part of the series, we will be covering Maps. We have covered some basic data structures like arrays and slices, and now we can move into maps or hash tables. Maps allow us to store key-value pairs of a particular type. In this part of the series, we will be covering the basics of Maps in Golang like declaration, iteration, and Creating, updating, and deleting keys from the map.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Slices</title>
      <link>http://localhost:1313/golang-slices/</link>
      <pubDate>Thu, 07 Apr 2022 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-slices/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the sixth part of the series, we will be covering slices. Slices are almost like arrays but have a lot of advantages over them, including flexibility and control over them. We can adjust the size and capacity of the data which we will store at a place using slices. We will be covering basic declaration, initialization, capacity in slices, iteration, and accessing the elements of the slices.&lt;/p&gt;&#xA;&lt;h2 id=&#34;slices-in-golang&#34;&gt;Slices in Golang&lt;/h2&gt;&#xA;&lt;p&gt;Slices are Arrays but can provide more control and are more flexible than arrays. In slices, we can increase the size of the array/list of elements whenever required. We can even have a capacity for slices i.e. the maximum length we wish to grow the initial slice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Arrays</title>
      <link>http://localhost:1313/golang-arrays/</link>
      <pubDate>Wed, 06 Apr 2022 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-arrays/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this fifth section of Golang, we will be understanding the basics of arrays. We will be covering some basic operations on arrays like declaration, initialization, modifications, and iterating over an array.&lt;/p&gt;&#xA;&lt;h2 id=&#34;declaring-arrays&#34;&gt;Declaring Arrays&lt;/h2&gt;&#xA;&lt;p&gt;Arrays are type of data structure that allow us to store multiple items at continuous memory locations of the same type. In golang, we can create arrays similar to any variable but by adding a few bits and pieces like the &lt;code&gt;[]&lt;/code&gt; square braces, length of the array, values, etc. In golang, we cannot resize the length once it is initialized.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Input</title>
      <link>http://localhost:1313/golang-input/</link>
      <pubDate>Tue, 05 Apr 2022 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-input/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this fourth section of Golang, we will be understanding the basics of user input. In golang, we can get user input with several functions most of which are similar to the &lt;code&gt;C&lt;/code&gt; programming language like &lt;code&gt;scanf&lt;/code&gt;. This type of input is quite powerful and gives more control on the input to be received.&lt;/p&gt;&#xA;&lt;h2 id=&#34;scan-function&#34;&gt;Scan Function&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/fmt#Scan&#34;&gt;Scan&lt;/a&gt; function helps in getting a value with space as delimiter i.e. The input is stored before a space is encountered. This means the input is only limited to adding a space or a new line. We can use the function by passing the reference to the variable we are going to store the input value. So, we can have a basic input in Golang as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Conditionals and Loops</title>
      <link>http://localhost:1313/golang-conditionals-loops/</link>
      <pubDate>Mon, 04 Apr 2022 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-conditionals-loops/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving to the fourth part, we will be doing conditional statements and loops in golang. We will be seeing the basics of conditional statements like if-else and switch along with loops like for, while, and range-based loops. We won&amp;rsquo;t be covering iterating over arrays in a loop as this requires an understanding of arrays.&lt;/p&gt;&#xA;&lt;h2 id=&#34;conditional-statements&#34;&gt;Conditional statements&lt;/h2&gt;&#xA;&lt;p&gt;Conditional statements are quite a fundamental aspect of learning a programming language. In golang, we have if-else conditional statements as well as switch cases. We will be exploring both of them in this section. Firstly, we will dive into if-else statements which are quite easy to understand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Variables and Types</title>
      <link>http://localhost:1313/golang-variables/</link>
      <pubDate>Sun, 03 Apr 2022 10:45:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-variables/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In the third part of the series, we will be covering the fundamentals for learning any programming language i.e. variables and data types. We will be covering from data types to variable declaration. We won&amp;rsquo;t be seeing each and every detail related to the data types as some of them require a knowledge of loops and other topics, so that can be left for the different part.&lt;/p&gt;&#xA;&lt;h2 id=&#34;types-in-golang&#34;&gt;Types in golang&lt;/h2&gt;&#xA;&lt;p&gt;In Golang there are 3 major types : Numeric, Bool and String. Further we also have specific types for the three data types like int, float, rune, byte, etc. We will first see how to declare a simple variable and then explore the data types in Golang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: Installation and Hello-World</title>
      <link>http://localhost:1313/hello-golang/</link>
      <pubDate>Sat, 02 Apr 2022 16:36:33 +0000</pubDate>
      <guid>http://localhost:1313/hello-golang/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Moving on to the second day, we will be installing and setting up Go lang on our systems. The installation and setup are quite simple and not much demonstration is required, so further in the article, I will also make a hello-world program in GO. We will explore the basic program in GO and how to compile, run and build a GO program in this section.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installing-go&#34;&gt;Installing Go&lt;/h2&gt;&#xA;&lt;p&gt;Installing Go is pretty straightforward. You have to install the binaries from the official website as per your operating system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang: What and Why?</title>
      <link>http://localhost:1313/golang-intro/</link>
      <pubDate>Fri, 01 Apr 2022 10:00:00 +0000</pubDate>
      <guid>http://localhost:1313/golang-intro/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This is the first entry in my 100 days of Go lang challenge. I will share the things I will learn each day for 100 days related to Golang or its configuration in my environment. In this post, we will understand what is golang and why you should learn it. It&amp;rsquo;s not an in-depth guide but a high-level overview for understanding the context of learning Go lang.&lt;/p&gt;&#xA;&lt;h3 id=&#34;a-bit-of-context&#34;&gt;A bit of Context&lt;/h3&gt;&#xA;&lt;p&gt;In April 2021, I started learning Django and to date, I have more than 10 projects(not all deployed) created and publicly open on &lt;a href=&#34;https://github.com/Mr-Destructive?tab=repositories&amp;amp;q=django&amp;amp;type=&amp;amp;language=python&amp;amp;sort=&#34;&gt;GitHub&lt;/a&gt;. It has been a great experience so far, I am still in between an internship with a project to be created in Django. The learning process after I started blogging in June 2021 has been a different fantasy, I have been enjoying the process of writing the things I learn. So, this Spring/Summer I am creating a challenge of 100 days for learning Go lang and documenting the process. Hopefully, this will be a useful place to learn for a beginner and more than that a place for me to reflect back on the future.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
